{{>licenseInfo}}
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional, LOCALE_ID }           from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import '../rxjs-operators';

import { callApiEndpoint, ApaleoRequestOptions, ResponseModel, dateToApaleoIso } from '@apaleo/angular-api-proxy-common';

{{#imports}}
import { {{classname}} } from '../{{filename}}';
{{/imports}}

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
{{#withInterfaces}}
import { {{classname}}Interface }                            from './{{classname}}Interface';
{{/withInterfaces}}

{{#operations}}

{{#operation}}
{{#allParams.0}}export namespace {{nickname}} {
    export interface Params {
    {{#allParams}}
        /**
        * {{{description}}}
        */
        readonly {{paramName}}{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}};
    {{/allParams}}  
    }
    {{#allParams}}{{#isEnum}}
    export type {{enumName}} = {{#allowableValues}}{{#enumVars}}{{{value}}}{{^-last}} | {{/-last}}{{/enumVars}}{{/allowableValues}};

    export const {{enumName}}Values = Object.freeze(
        [{{#allowableValues}}{{#enumVars}}{{{value}}}{{^-last}}, {{/-last}}{{/enumVars}}{{/allowableValues}}] as {{enumName}}[]);
    {{/isEnum}}{{/allParams}}
}
{{/allParams.0}}
{{/operation}}

{{#description}}
/**
 * {{&description}}
 */
{{/description}}
@Injectable()
{{#withInterfaces}}
export class {{classname}} implements {{classname}}Interface {
{{/withInterfaces}}
{{^withInterfaces}}
export class {{classname}} {
{{/withInterfaces}}

    protected readonly basePath: string;
    protected readonly defaultHeaders: Headers = new Headers();

    constructor(
        protected readonly http: Http, 
        @Optional()@Inject(BASE_PATH) basePath: string,
        @Inject(LOCALE_ID) protected readonly locale: string,  
        @Optional() protected readonly configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
			this.basePath = basePath || configuration.basePath || this.basePath;
        }

        if (this.basePath === undefined || this.basePath === null) {
            throw Error('No basePath could was set for {{classname}}');
        }

        this.defaultHeaders.append('Accept-Language', locale);
    }

    /**
     * 
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                (objA as any)[key] = (objB as any)[key];
            }
        }
        return <T1&T2>objA;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

{{#operation}}
    /**
     * {{&notes}}
     {{#summary}}
     * @summary {{&summary}}
     {{/summary}}*/
    public {{nickname}}({{#allParams.0}}params: {{nickname}}.Params, {{/allParams.0}}$options?: ApaleoRequestOptions) {
        return this.{{nickname}}WithHttpInfo({{#allParams.0}}params, {{/allParams.0}}$options)
            .map(response => {
                if (response.$hasValue(response)) {
{{^isResponseFile}}
                    return response.$value;
{{/isResponseFile}}
{{#isResponseFile}}
                    return response.$response.blob();
{{/isResponseFile}}
                } else {
                    return undefined;
                }
            });
    }

{{/operation}}

{{#operation}}
    /**
     * {{summary}}
     * {{notes}}
     {{#allParams}}* @param {{paramName}} {{description}}
     {{/allParams}}*/
    public {{nickname}}WithHttpInfo({{#allParams.0}}params: {{nickname}}.Params, {{/allParams.0}}$options?: ApaleoRequestOptions)
{{^isResponseFile}}
        : Observable<ResponseModel<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}>>{
{{/isResponseFile}}
{{#isResponseFile}}
        : Observable<ResponseModel<{{#returnType}}{{{returnType}}}|undefined{{/returnType}}{{^returnType}}void{{/returnType}}>>{
{{/isResponseFile}}
{{#allParams.0}}        params = params || {};{{/allParams.0}}
        const path = this.basePath + '{{{path}}}'{{#pathParams}}
                    .replace('${' + '{{baseName}}' + '}', String(params.{{paramName}})){{/pathParams}};

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

{{#allParams}}
{{#required}}
        // verify required parameter '{{paramName}}' is not null or undefined
        if (params.{{paramName}} === null || params.{{paramName}} === undefined) {
            throw new Error('Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
        }
{{/required}}
{{/allParams}}
{{#queryParams}}
        {{#isListContainer}}
        if (params.{{paramName}}) {
        {{#isCollectionFormatMulti}}
            params.{{paramName}}.forEach((element) => {
                queryParameters.append('{{baseName}}', <any>element);
            })
        {{/isCollectionFormatMulti}}
        {{^isCollectionFormatMulti}}
            queryParameters.set('{{baseName}}', params.{{paramName}}.join(COLLECTION_FORMATS['{{collectionFormat}}']));
        {{/isCollectionFormatMulti}}
        }
        {{/isListContainer}}
        {{^isListContainer}}
        if (params.{{paramName}} !== undefined) {
        {{#isDateTime}}
            queryParameters.set('{{baseName}}', dateToApaleoIso(params.{{paramName}}));
        {{/isDateTime}}
        {{^isDateTime}}
            queryParameters.set('{{baseName}}', <any>params.{{paramName}});
        {{/isDateTime}}
        }
        {{/isListContainer}}

{{/queryParams}}
{{#headerParams}}
        {{#isListContainer}}
        if (params.{{paramName}}) {
            headers.set('{{baseName}}', params.{{paramName}}.join(COLLECTION_FORMATS['{{collectionFormat}}']));
        }
        {{/isListContainer}}
        {{^isListContainer}}
        if (params.{{paramName}} !== undefined && params.{{paramName}} !== null) {
            headers.set('{{baseName}}', String(params.{{paramName}}));
        }
        {{/isListContainer}}

{{/headerParams}}
{{#hasFormParams}}
        // to determine the Content-Type header
        let consumes: string[] = [
            {{#consumes}}
            '{{{mediaType}}}'{{#hasMore}},{{/hasMore}}
            {{/consumes}}
        ];
        let canConsumeForm = this.canConsumeForm(consumes);
        let useForm = false;
{{#formParams}}
{{#isFile}}
        useForm = canConsumeForm;
{{/isFile}}
{{/formParams}}
        let formParams = new (useForm ? FormData : URLSearchParams as any)() as {
          set(param: string, value: any): void;
        };
{{/hasFormParams}}

        // to determine the Accept header
        let produces: string[] = [
            {{#produces}}
            '{{{mediaType}}}'{{#hasMore}},{{/hasMore}}
            {{/produces}}
        ];

{{#authMethods}}
        // authentication ({{name}}) required
{{#isApiKey}}
{{#isKeyInHeader}}
        if (this.configuration.apiKeys["{{keyParamName}}"]) {
            headers.set('{{keyParamName}}', this.configuration.apiKeys["{{keyParamName}}"]);
        }

{{/isKeyInHeader}}
{{#isKeyInQuery}}
        if (this.configuration.apiKeys["{{keyParamName}}"]) {
            queryParameters.set('{{keyParamName}}', this.configuration.apiKeys["{{keyParamName}}"]);
        }

{{/isKeyInQuery}}
{{/isApiKey}}
{{#isBasic}}
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

{{/isBasic}}
{{#isOAuth}}
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

{{/isOAuth}}
{{/authMethods}}
            
{{#bodyParam}}
        headers.set('Content-Type', 'application/json');

{{/bodyParam}}
{{#formParams}}
        {{#isListContainer}}
        if (params.{{paramName}}) {
        {{#isCollectionFormatMulti}}
            params.{{paramName}}.forEach((element) => {
                formParams.append('{{baseName}}', <any>element);
            })
        {{/isCollectionFormatMulti}}
        {{^isCollectionFormatMulti}}
            formParams.set('{{baseName}}', params.{{paramName}}.join(COLLECTION_FORMATS['{{collectionFormat}}']));
        {{/isCollectionFormatMulti}}
        }
        {{/isListContainer}}
        {{^isListContainer}}
        if (params.{{paramName}} !== undefined) {
            formParams.set('{{baseName}}', <any>params.{{paramName}});
        }
        {{/isListContainer}}

{{/formParams}}

{{^isResponseFile}}
        return callApiEndpoint<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}>(
{{/isResponseFile}}
{{#isResponseFile}}
        return callApiEndpoint<{{#returnType}}{{{returnType}}}|undefined{{/returnType}}{{^returnType}}void{{/returnType}}>(
{{/isResponseFile}}
            this.http, 
            path,
            headers,
            {
                method: {{httpMethod}},
                headers: headers,
{{#bodyParam}}
                body: params.{{paramName}} == null ? '' : params.{{paramName}}, // https://github.com/angular/angular/issues/10612
{{/bodyParam}}
{{#hasFormParams}}
                body: formParams.toString(),
{{/hasFormParams}}
{{#isResponseFile}}
                responseType: ResponseContentType.Blob,
{{/isResponseFile}}
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.{{nickname}}WithHttpInfo({{#allParams.0}}params, {{/allParams.0}}$options);
            }
        )
    }

{{/operation}}
}
{{/operations}}
