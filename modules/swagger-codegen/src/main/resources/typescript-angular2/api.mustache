{{>licenseInfo}}
import { Inject, Injectable, LOCALE_ID }                           from '@angular/core';
import { Http, Headers, URLSearchParams, Response, RequestMethod } from '@angular/http';

import { Observable }                                              from 'rxjs/Rx';
import 'rxjs/add/operator/map';

import * as models                                                 from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                           from '../../variables';
import { ApaleoRequestOptions, ResponseModel }                     from '../../models';
import { Configuration }                                           from '../../configuration';
import { callApiEndpoint }                                         from '../../functions.api';

/* tslint:disable:no-unused-variable member-ordering */

{{#operations}}

{{#operation}}
{{#allParams.0}}export interface {{nickname}}Params {
{{#allParams}}
    /**
     * {{{description}}}
     */
    {{paramName}}{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}};
    {{paramName}}{{^required}}?{{/required}}: {{{dataType}}};
{{/allParams}}  
}
{{#allParams}}{{#isEnum}}
export namespace {{nickname}}Params {
    export enum {{datatypeWithEnum}}Set {
    {{#allowableValues}}
        {{#enumVars}}
        {{{name}}} = {{{value}}}{{^-last}},{{/-last}}
        {{/enumVars}}
    {{/allowableValues}}
    }

    export type {{datatypeWithEnum}} = {{#allowableValues}}{{#enumVars}}{{{value}}}{{^-last}} | {{/-last}}{{/enumVars}}{{/allowableValues}};

    export const {{datatypeWithEnum}}Values = Object.freeze(
        [{{#allowableValues}}{{#enumVars}}{{{value}}}{{^-last}}, {{/-last}}{{/enumVars}}{{/allowableValues}}] as {{datatypeWithEnum}}[]);
}
{{/isEnum}}{{/allParams}}
{{/allParams.0}}
{{/operation}}

{{#description}}
/**
 * {{&description}}
 */
{{/description}}
@Injectable()
export class {{classname}} {
    public defaultHeaders: Headers = new Headers();

    constructor(
        protected readonly http: Http, 
        protected readonly configuration: Configuration,
        @Inject(LOCALE_ID) protected readonly locale: string, 
        @Inject(BASE_PATH) protected readonly basePath: string) {

        this.defaultHeaders.append('Accept-Language', locale);
    }

{{#operation}}
    /**
     * {{summary}}
     * {{notes}}
     {{#allParams}}* @param {{paramName}} {{description}}
     {{/allParams}}*/
    public {{nickname}}({{#allParams.0}}params: {{nickname}}Params, {{/allParams.0}}$options?: ApaleoRequestOptions)
        : Observable<{{#returnType}}{{{returnType}}} | undefined{{/returnType}}{{^returnType}}void{{/returnType}}> {
        return this.{{nickname}}WithRawHttp({{#allParams.0}}params, {{/allParams.0}}$options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }

{{/operation}}

{{#operation}}
    /**
     * {{summary}}
     * {{notes}}
     {{#allParams}}* @param {{paramName}} {{description}}
     {{/allParams}}*/
    public {{nickname}}WithRawHttp({{#allParams.0}}params: {{nickname}}Params, {{/allParams.0}}$options?: ApaleoRequestOptions)
        : Observable<ResponseModel<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}>> {
        return this.{{nickname}}WithHttpInfo({{#allParams.0}}params, {{/allParams.0}}$options)
            .map((response: Response) => new ResponseModel(response));
    }

{{/operation}}

{{#operation}}
    /**
     * {{summary}}
     * {{notes}}
     {{#allParams}}* @param {{paramName}} {{description}}
     {{/allParams}}*/
    private {{nickname}}WithHttpInfo({{#allParams.0}}params: {{nickname}}Params, {{/allParams.0}}$options?: ApaleoRequestOptions): Observable<Response> {
{{#allParams.0}}        params = params || {};{{/allParams.0}}
        const path = this.basePath + '{{path}}'{{#pathParams}}
                    .replace('${' + '{{baseName}}' + '}', String(params.{{paramName}})){{/pathParams}};

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
{{#hasFormParams}}
        let formParams = new URLSearchParams();

{{/hasFormParams}}
{{#allParams}}
{{#required}}
        // verify required parameter '{{paramName}}' is not null or undefined
        if (params.{{paramName}} === null || params.{{paramName}} === undefined) {
            throw new Error('Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
        }
{{/required}}
{{/allParams}}
{{#queryParams}}
        {{#isListContainer}}
        if (params.{{paramName}}) {
        {{#isCollectionFormatMulti}}
            params.{{paramName}}.forEach((element) => {
                queryParameters.append('{{baseName}}', <any>element);
            })
        {{/isCollectionFormatMulti}}
        {{^isCollectionFormatMulti}}
            queryParameters.set('{{baseName}}', params.{{paramName}}.join(COLLECTION_FORMATS['{{collectionFormat}}']));
        {{/isCollectionFormatMulti}}
        }
        {{/isListContainer}}
        {{^isListContainer}}
        if (params.{{paramName}} !== undefined) {
        {{#isDateTime}}
            queryParameters.set('{{baseName}}', <any>params.{{paramName}}.toApaleoIso());
        {{/isDateTime}}
        {{^isDateTime}}
            {{#isDate}}
            queryParameters.set('{{baseName}}', <any>params.{{paramName}}.toApaleoDatesIso());
            {{/isDate}}
            {{^isDate}}
            queryParameters.set('{{baseName}}', <any>params.{{paramName}});
            {{/isDate}}
        {{/isDateTime}}
        }
        {{/isListContainer}}

{{/queryParams}}
{{#headerParams}}
        {{#isListContainer}}
        if (params.{{paramName}}) {
            headers.set('{{baseName}}', params.{{paramName}}.join(COLLECTION_FORMATS['{{collectionFormat}}']));
        }
        {{/isListContainer}}
        {{^isListContainer}}
        if (params.{{paramName}} !== undefined && params.{{paramName}} !== null) {
            headers.set('{{baseName}}', String(params.{{paramName}}));
        }
        {{/isListContainer}}

{{/headerParams}}
        // to determine the Content-Type header
        let consumes: string[] = [
            {{#consumes}}
            '{{{mediaType}}}'{{#hasMore}}, {{/hasMore}}
            {{/consumes}}
        ];

        // to determine the Accept header
        let produces: string[] = [
            {{#produces}}
            '{{{mediaType}}}'{{#hasMore}}, {{/hasMore}}
            {{/produces}}
        ];

{{#authMethods}}
        // authentication ({{name}}) required
{{#isApiKey}}
{{#isKeyInHeader}}
        if (this.configuration.apiKey) {
            headers.set('{{keyParamName}}', this.configuration.apiKey);
        }

{{/isKeyInHeader}}
{{#isKeyInQuery}}
        if (this.configuration.apiKey) {
            queryParameters.set('{{keyParamName}}', this.configuration.apiKey);
        }

{{/isKeyInQuery}}
{{/isApiKey}}
{{#isBasic}}
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

{{/isBasic}}
{{#isOAuth}}
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

{{/isOAuth}}
{{/authMethods}}
{{#hasFormParams}}
        headers.set('Content-Type', 'application/x-www-form-urlencoded');

{{/hasFormParams}}
{{#bodyParam}}
        headers.set('Content-Type', 'application/json');

{{/bodyParam}}
{{#formParams}}
        {{#isListContainer}}
        if (params.{{paramName}}) {
        {{#isCollectionFormatMulti}}
            params.{{paramName}}.forEach((element) => {
                formParams.append('{{baseName}}', <any>element);
            })
        {{/isCollectionFormatMulti}}
        {{^isCollectionFormatMulti}}
            formParams.set('{{baseName}}', params.{{paramName}}.join(COLLECTION_FORMATS['{{collectionFormat}}']));
        {{/isCollectionFormatMulti}}
        }
        {{/isListContainer}}
        {{^isListContainer}}
        if (params.{{paramName}} !== undefined) {
            formParams.set('{{baseName}}', <any>params.{{paramName}});
        }
        {{/isListContainer}}

{{/formParams}}
        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: {{httpMethod}},
                headers: headers,
{{#bodyParam}}
                body: params.{{paramName}} == null ? '' : JSON.stringify(params.{{paramName}}), // https://github.com/angular/angular/issues/10612
{{/bodyParam}}
{{#hasFormParams}}
                body: formParams.toString(),
{{/hasFormParams}}
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.{{nickname}}WithHttpInfo({{#allParams.0}}params, {{/allParams.0}}$options);
            }
        )
    }

{{/operation}}
}
{{/operations}}
