import { Validators, FormBuilder, ValidatorFn, FormGroup, AbstractControl } from '@angular/forms';
import { IBuildFormOptions, IControlFactoryOptions, Control }               from '../../types';
import { IApaleoAbstractControl, IApaleoControlMetaData, Optional }         from '../../types';
import { ResponseModel }                                                    from '../../models';
import { getControl, getControlOptions, adjustDefaultControls }             from '../../functions';

export interface {{classname}} {{#parent}}extends models.{{{parent}}} {{/parent}}{
{{#additionalPropertiesType}}
    [key: string]: {{{additionalPropertiesType}}}{{#hasVars}} | any{{/hasVars}};

{{/additionalPropertiesType}}
{{#vars}}
    {{#description}}
    /**
     * {{{description}}}
     */
    {{/description}}
    {{name}}{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{datatype}}}{{/isEnum}};

{{/vars}}
}{{#hasEnums}}
export namespace {{classname}} {
{{#vars}}
    {{#isEnum}}
    export enum {{enumName}} {
    {{#allowableValues}}
        {{#enumVars}}
        {{{name}}} = <any> {{{value}}}{{^-last}},{{/-last}}
        {{/enumVars}}
    {{/allowableValues}}
    }
    {{/isEnum}}
{{/vars}}
}{{/hasEnums}}

export type {{classname}}WithRawHttp = {{classname}} & ResponseModel<{{classname}}>;

export namespace {{classname}} {
    export const $validators = {
    {{#vars}}
        {{name}}: (() => [{{#required}}
            Validators.required,{{/required}}{{#minLength}}
            Validators.minLength({{minLength}}),{{/minLength}}{{#maxLength}}
            Validators.maxLength({{maxLength}}),{{/maxLength}}
        ]),
    {{/vars}}
    };

    export const $controls = { {{#vars}}{{^isListContainer}}{{^isMapContainer}}{{#isPrimitiveType}}
        {{name}}: ((options?: IControlFactoryOptions<{{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{datatype}}}{{/isEnum}}>) => getControl($validators.{{name}}(), options)),{{/isPrimitiveType}}{{/isMapContainer}}{{/isListContainer}}{{/vars}}
    };

    export const $metaData = { {{#vars}}{{#isPrimitiveType}}
        {{name}}: { {{#maxLength}}
            maxLength: {{maxLength}},{{/maxLength}}{{^isEnum}}
            type: '{{datatype}}',{{/isEnum}}
        },{{/isPrimitiveType}}{{/vars}}
    };

    export function $buildForm(fb: FormBuilder, options?: IBuildFormOptions<{{classname}}>) {
        const defaultControls = { {{#vars}}{{^isListContainer}}{{^isMapContainer}}
            {{name}}: {{#isPrimitiveType}}$controls.{{name}}(getControlOptions(options, '{{name}}')){{/isPrimitiveType}}{{^isPrimitiveType}}{{datatype}}.$buildForm(fb){{/isPrimitiveType}},{{/isMapContainer}}{{/isListContainer}}{{/vars}}
        };
        const group = fb.group(adjustDefaultControls(defaultControls, options)!);
{{#vars}}{{^isListContainer}}{{^isMapContainer}}{{#isPrimitiveType}}
        (<any>group.controls['{{name}}']).apaleoMetaData = $metaData.{{name}};{{/isPrimitiveType}}{{/isMapContainer}}{{/isListContainer}}{{/vars}}

        return group;
    }
}
