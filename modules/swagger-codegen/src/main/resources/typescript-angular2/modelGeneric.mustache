import { FormBuilder, FormGroup }                              from '@angular/forms';
import { IBuildFormOptions, IApaleoPropertyMetaData }          from '../../types';
import { ResponseModel }                                       from '../../models';
import { getControl, adjustDefaultControls, prepareFormGroup } from '../../functions.model';

export interface {{classname}} {{#parent}}extends models.{{{parent}}} {{/parent}}{
{{#additionalPropertiesType}}
    [key: string]: {{{additionalPropertiesType}}}{{#hasVars}} | any{{/hasVars}};

{{/additionalPropertiesType}}
{{#vars}}
    {{#description}}
    /**
     * {{{description}}}
     */
    {{/description}}
    {{name}}{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{datatype}}}{{/isEnum}};

{{/vars}}
}{{#hasEnums}}
export namespace {{classname}} {
{{#vars}}
    {{#isEnum}}
    export enum {{enumName}} {
    {{#allowableValues}}
        {{#enumVars}}
        {{{name}}} = <any> {{{value}}}{{^-last}},{{/-last}}
        {{/enumVars}}
    {{/allowableValues}}
    }
    {{/isEnum}}
{{/vars}}
}{{/hasEnums}}

export type {{classname}}WithRawHttp = {{classname}} & ResponseModel<{{classname}}>;

export namespace {{classname}} {
    export const $metaData = { {{#vars}}
        {{name}}: Object.freeze({ {{#required}}
            isRequired: true,{{/required}}{{#minLength}}
            minLength: {{minLength}},{{/minLength}}{{#maxLength}}
            maxLength: {{maxLength}},{{/maxLength}}
            type: '{{{datatype}}}',{{#isEnum}}
            isEnum: true,{{/isEnum}}{{#isPrimitiveType}}
            isPrimitiveType: true,{{/isPrimitiveType}}{{#isListContainer}}
            isListContainer: true,{{/isListContainer}}{{#isMapContainer}}
            isMapContainer: true,{{/isMapContainer}}
        } as IApaleoPropertyMetaData),{{/vars}}
    };

    export function $buildForm(fb: FormBuilder, options?: IBuildFormOptions<{{classname}}>): FormGroup {
        const defaultControls = { {{#vars}}{{^isListContainer}}{{^isMapContainer}}
            {{name}}: {{#isPrimitiveType}}getControl($metaData.{{name}}, options, '{{name}}'){{/isPrimitiveType}}{{^isPrimitiveType}}{{datatype}}.$buildForm(fb){{/isPrimitiveType}},{{/isMapContainer}}{{/isListContainer}}{{/vars}}
        };
        const group = fb.group(adjustDefaultControls(defaultControls, options));
        prepareFormGroup(group, $metaData, options);

        return group;
    }
}
