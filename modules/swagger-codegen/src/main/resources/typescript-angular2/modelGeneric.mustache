import { Validators, FormBuilder, ValidatorFn, FormGroup }          from '@angular/forms';
import { ValidatorsFactory, ControlFactory, Control }               from '../../types';
import { IApaleoAbstractControl, IApaleoControlMetaData, Optional } from '../../types';
import { ResponseModel }                                            from '../../models';

export interface {{classname}} {{#parent}}extends models.{{{parent}}} {{/parent}}{
{{#additionalPropertiesType}}
    [key: string]: {{{additionalPropertiesType}}}{{#hasVars}} | any{{/hasVars}};

{{/additionalPropertiesType}}
{{#vars}}
    {{#description}}
    /**
     * {{{description}}}
     */
    {{/description}}
    {{name}}{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{datatype}}}{{/isEnum}};

{{/vars}}
}{{#hasEnums}}
export namespace {{classname}} {
{{#vars}}
    {{#isEnum}}
    export enum {{enumName}} {
    {{#allowableValues}}
        {{#enumVars}}
        {{{name}}} = <any> {{{value}}}{{^-last}},{{/-last}}
        {{/enumVars}}
    {{/allowableValues}}
    }
    {{/isEnum}}
{{/vars}}
}{{/hasEnums}}

export type {{classname}}WithRawHttp = {{classname}} & ResponseModel<{{classname}}>;

export interface {{classname}}$Form<T> {
{{#vars}}
    {{name}}: T;
{{/vars}}
}

export interface {{classname}}$ValidatorFactories extends {{classname}}$Form<ValidatorsFactory> {}
export interface {{classname}}$ControlFactories extends {{classname}}$Form<ControlFactory> {}
export interface {{classname}}$Control extends {{classname}}$Form<Control | FormGroup> {}
export interface {{classname}}$ControlMetaData extends {{classname}}$Form<IApaleoControlMetaData> {}

export namespace {{classname}} {
    export const $validators: {{classname}}$ValidatorFactories = {
    {{#vars}}
        {{name}}: (() => [
            {{#required}}Validators.required,{{/required}}
            {{#minLength}}Validators.minLength({{minLength}}),{{/minLength}}
            {{#maxLength}}Validators.maxLength({{maxLength}}),{{/maxLength}}
        ]),
    {{/vars}}
    };

    export const $controls: {{classname}}$ControlFactories = {
    {{#vars}}
        {{name}}: (() => [null, Validators.compose($validators.{{name}}())]),
    {{/vars}}
    };

    export const $metaData: {{classname}}$ControlMetaData = {
    {{#vars}}
        {{name}}: {
            {{^isListContainer}}{{#isPrimitiveType}}
            {{#maxLength}}maxLength: {{maxLength}},{{/maxLength}}
            {{^isEnum}}type: '{{datatype}}',{{/isEnum}}
            {{/isPrimitiveType}}{{/isListContainer}}
        },
    {{/vars}}
    };

    export function $buildForm(fb: FormBuilder, specificControls?: Optional<{{classname}}$Control>, additionalControls?: { [name: string]: (Control | FormGroup) }) {
        const defaultControls = {
{{#vars}}
    {{^isListContainer}}
            {{name}}: {{#isPrimitiveType}}$controls.{{name}}(){{/isPrimitiveType}}{{^isPrimitiveType}}{{datatype}}.$buildForm(fb){{/isPrimitiveType}},
    {{/isListContainer}} 
{{/vars}}
        };

        const group = fb.group(Object.assign(defaultControls, specificControls, additionalControls));

{{#vars}}
    {{^isListContainer}}{{#isPrimitiveType}}
        const {{name}}Ctrl: IApaleoAbstractControl = <any>group.controls['{{name}}'];
        {{name}}Ctrl.apaleoMetaData = $metaData.{{name}};
    {{/isPrimitiveType}}{{/isListContainer}}
{{/vars}}

        return group;
    }
}
